{"version":3,"sources":["components/pano.js","App.js","serviceWorker.js","index.js"],"names":["Pano2","scene","THREE","camera","window","innerWidth","innerHeight","renderer","step","controls","OrbitControls","domElement","console","log","this","initThree","setClearColor","setSize","shadowMapEnabled","axes","add","position","set","spotLight","castShadow","geometry","material","imgList","i","length","mmm","map","loadTexture","render","side","push","mesh","document","getElementById","appendChild","renderScene","addEventListener","enableDamping","dampingFactor","enableZoom","id","Component","App","className","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAIqBA,E,2MAKjBC,MAAQ,IAAIC,Q,EACZC,OAAS,IAAID,oBAAwB,GAAIE,OAAOC,WAAaD,OAAOE,YAAa,GAAK,K,EACtFC,SAAW,IAAIL,gB,EACfM,KAAO,E,EACPC,SAAW,IAAIC,IAAc,EAAKP,OAAQ,EAAKI,SAASI,Y,mFAGpDC,QAAQC,IAAIC,KAAKN,MACjBM,KAAKC,c,kCAGI,IAAD,OACRD,KAAKP,SAASS,gBACdF,KAAKP,SAASS,cAAc,IAAId,QAAY,WAC5CY,KAAKP,SAASU,QAAQb,OAAOC,WAAYD,OAAOE,aAChDQ,KAAKP,SAASW,kBAAmB,EAGjC,IAAMC,EAAO,IAAIjB,aAAiB,KAClCY,KAAKb,MAAMmB,IAAID,GAIfL,KAAKX,OAAOkB,SAASC,IAAI,EAAE,EAAE,GAE7B,IAAMC,EAAY,IAAIrB,YAAgB,UACtCqB,EAAUF,SAASC,KAAK,GAAI,IAAK,IACjCC,EAAUC,YAAa,EACvBV,KAAKb,MAAMmB,IAAIG,GAYf,IAVA,IAAME,EAAW,IAAIvB,cAAkB,GAAI,GAAI,IAC3CwB,EAAS,GACTC,EAAU,CACV,UACA,UACA,UACA,UACA,UACA,WAEIC,EAAI,EAAGA,EAAID,EAAQE,OAAQD,IAAI,CACnC,IAAIE,EAAM,IAAI5B,oBAAwB,CAClC6B,IAAK7B,aAAiB8B,YAAYL,EAAQC,GAC1C,GAAI,WACI,EAAKrB,SAAS0B,OAAO,EAAKhC,MAAO,EAAKE,YAGlD2B,EAAII,KAAOhC,WACXwB,EAASS,KAAKL,GAElB,IAAMM,EAAO,IAAIlC,OAAWuB,EAAU,IAAIvB,mBAAuBwB,IACjEZ,KAAKb,MAAMmB,IAAIgB,GAIfC,SAASC,eAAe,gBAAgBC,YAAYzB,KAAKP,SAASI,YAElE,IAAM6B,EAAc,WAChB,EAAKjC,SAAS0B,OAAO,EAAKhC,MAAO,EAAKE,SAE1CqC,IAEA1B,KAAKL,SAASgC,iBAAiB,SAAUD,GACzC1B,KAAKL,SAASiC,eAAgB,EAC9B5B,KAAKL,SAASkC,cAAgB,IAC9B7B,KAAKL,SAASmC,YAAa,I,+BAG3B,OACI,yBAAKC,GAAG,qB,GA1EeC,a,MCUpBC,MAVf,WACE,OACE,yBAAKC,UAAU,OAEb,kBAAC,EAAD,QCIcC,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,2DCZNC,IAASpB,OAAO,kBAAC,EAAD,MAASI,SAASC,eAAe,SD2H3C,kBAAmBgB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.375440b7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols'\n\nexport default class Pano2 extends Component {\n    // constructor(props){\n    //     super(props);\n    //     // this.renderScene = this.renderScene.bind(this);\n    // }\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);\n    renderer = new THREE.WebGLRenderer();\n    step = 0;\n    controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    componentDidMount() {\n        console.log(this.step)\n        this.initThree();\n    }\n\n    initThree() {\n        this.renderer.setClearColor();\n        this.renderer.setClearColor(new THREE.Color(0xEEEEEE));\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.shadowMapEnabled = true;\n\n\n        const axes = new THREE.AxesHelper(1000);\n        this.scene.add(axes);\n\n\n\n        this.camera.position.set(0,0,1);\n\n        const spotLight = new THREE.SpotLight(0xffffff);\n        spotLight.position.set(-40, 60, -10);\n        spotLight.castShadow = true;\n        this.scene.add(spotLight)\n\n        const geometry = new THREE.BoxGeometry(50, 50, 50);\n        let material=[];\n        let imgList = [\n            './1.jpg',\n            './2.jpg',\n            './3.jpg',\n            './4.jpg',\n            './5.jpg',\n            './6.jpg',\n        ]\n        for(var i = 0; i < imgList.length; i++){\n            let mmm = new THREE.MeshBasicMaterial({\n                map: THREE.ImageUtils.loadTexture(imgList[i],//图片的路径\n                {}, () => {\n                        this.renderer.render(this.scene, this.camera);\n                    }),\n            })\n            mmm.side = THREE.BackSide; \n            material.push(mmm);\n        }\n        const mesh = new THREE.Mesh(geometry, new THREE.MeshFaceMaterial(material));\n        this.scene.add(mesh);\n\n        // this.scene.fog = new THREE.Fog(0xffffff, 0.015, 100);\n\n        document.getElementById(\"WebGL-output\").appendChild(this.renderer.domElement);\n\n        const renderScene = () => {\n            this.renderer.render(this.scene, this.camera);\n        }\n        renderScene()\n\n        this.controls.addEventListener(\"change\", renderScene);\n        this.controls.enableDamping = true\n        this.controls.dampingFactor = 0.25\n        this.controls.enableZoom = false\n    }\n    render() {\n        return (\n            <div id=\"WebGL-output\" />\n        )\n    }\n}\n","import React from 'react';\nimport Pano from './components/pano';\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Base /> */}\n      <Pano />\n      {/* <Pano /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}